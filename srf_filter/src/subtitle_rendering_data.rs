// This file is generated by rust-protobuf 2.12.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `subtitle_rendering_data.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_12_0;

#[derive(PartialEq,Clone,Default)]
pub struct RenderingData {
    // message fields
    pub width: u32,
    pub height: u32,
    pub transitions: ::protobuf::RepeatedField<Transition>,
    pub paths: ::protobuf::RepeatedField<Path>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RenderingData {
    fn default() -> &'a RenderingData {
        <RenderingData as ::protobuf::Message>::default_instance()
    }
}

impl RenderingData {
    pub fn new() -> RenderingData {
        ::std::default::Default::default()
    }

    // uint32 width = 1;


    pub fn get_width(&self) -> u32 {
        self.width
    }
    pub fn clear_width(&mut self) {
        self.width = 0;
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: u32) {
        self.width = v;
    }

    // uint32 height = 2;


    pub fn get_height(&self) -> u32 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u32) {
        self.height = v;
    }

    // repeated .Transition transitions = 3;


    pub fn get_transitions(&self) -> &[Transition] {
        &self.transitions
    }
    pub fn clear_transitions(&mut self) {
        self.transitions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transitions(&mut self, v: ::protobuf::RepeatedField<Transition>) {
        self.transitions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transitions(&mut self) -> &mut ::protobuf::RepeatedField<Transition> {
        &mut self.transitions
    }

    // Take field
    pub fn take_transitions(&mut self) -> ::protobuf::RepeatedField<Transition> {
        ::std::mem::replace(&mut self.transitions, ::protobuf::RepeatedField::new())
    }

    // repeated .Path paths = 4;


    pub fn get_paths(&self) -> &[Path] {
        &self.paths
    }
    pub fn clear_paths(&mut self) {
        self.paths.clear();
    }

    // Param is passed by value, moved
    pub fn set_paths(&mut self, v: ::protobuf::RepeatedField<Path>) {
        self.paths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_paths(&mut self) -> &mut ::protobuf::RepeatedField<Path> {
        &mut self.paths
    }

    // Take field
    pub fn take_paths(&mut self) -> ::protobuf::RepeatedField<Path> {
        ::std::mem::replace(&mut self.paths, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RenderingData {
    fn is_initialized(&self) -> bool {
        for v in &self.transitions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.paths {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.width = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.height = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transitions)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.paths)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.width != 0 {
            my_size += ::protobuf::rt::value_size(1, self.width, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.transitions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.paths {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.width != 0 {
            os.write_uint32(1, self.width)?;
        }
        if self.height != 0 {
            os.write_uint32(2, self.height)?;
        }
        for v in &self.transitions {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.paths {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RenderingData {
        RenderingData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "width",
                    |m: &RenderingData| { &m.width },
                    |m: &mut RenderingData| { &mut m.width },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "height",
                    |m: &RenderingData| { &m.height },
                    |m: &mut RenderingData| { &mut m.height },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Transition>>(
                    "transitions",
                    |m: &RenderingData| { &m.transitions },
                    |m: &mut RenderingData| { &mut m.transitions },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Path>>(
                    "paths",
                    |m: &RenderingData| { &m.paths },
                    |m: &mut RenderingData| { &mut m.paths },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<RenderingData>(
                    "RenderingData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RenderingData {
        static mut instance: ::protobuf::lazy::Lazy<RenderingData> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(RenderingData::new)
        }
    }
}

impl ::protobuf::Clear for RenderingData {
    fn clear(&mut self) {
        self.width = 0;
        self.height = 0;
        self.transitions.clear();
        self.paths.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RenderingData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RenderingData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Transition {
    // message fields
    pub time_in: u64,
    pub time_out: u64,
    pub shapes: ::protobuf::RepeatedField<Shape>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Transition {
    fn default() -> &'a Transition {
        <Transition as ::protobuf::Message>::default_instance()
    }
}

impl Transition {
    pub fn new() -> Transition {
        ::std::default::Default::default()
    }

    // uint64 time_in = 1;


    pub fn get_time_in(&self) -> u64 {
        self.time_in
    }
    pub fn clear_time_in(&mut self) {
        self.time_in = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_in(&mut self, v: u64) {
        self.time_in = v;
    }

    // uint64 time_out = 2;


    pub fn get_time_out(&self) -> u64 {
        self.time_out
    }
    pub fn clear_time_out(&mut self) {
        self.time_out = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_out(&mut self, v: u64) {
        self.time_out = v;
    }

    // repeated .Shape shapes = 4;


    pub fn get_shapes(&self) -> &[Shape] {
        &self.shapes
    }
    pub fn clear_shapes(&mut self) {
        self.shapes.clear();
    }

    // Param is passed by value, moved
    pub fn set_shapes(&mut self, v: ::protobuf::RepeatedField<Shape>) {
        self.shapes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shapes(&mut self) -> &mut ::protobuf::RepeatedField<Shape> {
        &mut self.shapes
    }

    // Take field
    pub fn take_shapes(&mut self) -> ::protobuf::RepeatedField<Shape> {
        ::std::mem::replace(&mut self.shapes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Transition {
    fn is_initialized(&self) -> bool {
        for v in &self.shapes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.time_in = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.time_out = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.shapes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.time_in != 0 {
            my_size += ::protobuf::rt::value_size(1, self.time_in, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.time_out != 0 {
            my_size += ::protobuf::rt::value_size(2, self.time_out, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.shapes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.time_in != 0 {
            os.write_uint64(1, self.time_in)?;
        }
        if self.time_out != 0 {
            os.write_uint64(2, self.time_out)?;
        }
        for v in &self.shapes {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Transition {
        Transition::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "time_in",
                    |m: &Transition| { &m.time_in },
                    |m: &mut Transition| { &mut m.time_in },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "time_out",
                    |m: &Transition| { &m.time_out },
                    |m: &mut Transition| { &mut m.time_out },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Shape>>(
                    "shapes",
                    |m: &Transition| { &m.shapes },
                    |m: &mut Transition| { &mut m.shapes },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Transition>(
                    "Transition",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Transition {
        static mut instance: ::protobuf::lazy::Lazy<Transition> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Transition::new)
        }
    }
}

impl ::protobuf::Clear for Transition {
    fn clear(&mut self) {
        self.time_in = 0;
        self.time_out = 0;
        self.shapes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Transition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transition {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Shape {
    // message fields
    pub x: i32,
    pub y: i32,
    pub argb: u32,
    pub path_index: u32,
    pub fill: bool,
    pub line_width: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Shape {
    fn default() -> &'a Shape {
        <Shape as ::protobuf::Message>::default_instance()
    }
}

impl Shape {
    pub fn new() -> Shape {
        ::std::default::Default::default()
    }

    // sint32 x = 1;


    pub fn get_x(&self) -> i32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: i32) {
        self.x = v;
    }

    // sint32 y = 2;


    pub fn get_y(&self) -> i32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: i32) {
        self.y = v;
    }

    // uint32 argb = 3;


    pub fn get_argb(&self) -> u32 {
        self.argb
    }
    pub fn clear_argb(&mut self) {
        self.argb = 0;
    }

    // Param is passed by value, moved
    pub fn set_argb(&mut self, v: u32) {
        self.argb = v;
    }

    // uint32 path_index = 4;


    pub fn get_path_index(&self) -> u32 {
        self.path_index
    }
    pub fn clear_path_index(&mut self) {
        self.path_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_path_index(&mut self, v: u32) {
        self.path_index = v;
    }

    // bool fill = 5;


    pub fn get_fill(&self) -> bool {
        self.fill
    }
    pub fn clear_fill(&mut self) {
        self.fill = false;
    }

    // Param is passed by value, moved
    pub fn set_fill(&mut self, v: bool) {
        self.fill = v;
    }

    // uint32 line_width = 6;


    pub fn get_line_width(&self) -> u32 {
        self.line_width
    }
    pub fn clear_line_width(&mut self) {
        self.line_width = 0;
    }

    // Param is passed by value, moved
    pub fn set_line_width(&mut self, v: u32) {
        self.line_width = v;
    }
}

impl ::protobuf::Message for Shape {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.y = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.argb = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.path_index = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.fill = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.line_width = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(1, self.x);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.y);
        }
        if self.argb != 0 {
            my_size += ::protobuf::rt::value_size(3, self.argb, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.path_index != 0 {
            my_size += ::protobuf::rt::value_size(4, self.path_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fill != false {
            my_size += 2;
        }
        if self.line_width != 0 {
            my_size += ::protobuf::rt::value_size(6, self.line_width, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0 {
            os.write_sint32(1, self.x)?;
        }
        if self.y != 0 {
            os.write_sint32(2, self.y)?;
        }
        if self.argb != 0 {
            os.write_uint32(3, self.argb)?;
        }
        if self.path_index != 0 {
            os.write_uint32(4, self.path_index)?;
        }
        if self.fill != false {
            os.write_bool(5, self.fill)?;
        }
        if self.line_width != 0 {
            os.write_uint32(6, self.line_width)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Shape {
        Shape::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                    "x",
                    |m: &Shape| { &m.x },
                    |m: &mut Shape| { &mut m.x },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                    "y",
                    |m: &Shape| { &m.y },
                    |m: &mut Shape| { &mut m.y },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "argb",
                    |m: &Shape| { &m.argb },
                    |m: &mut Shape| { &mut m.argb },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "path_index",
                    |m: &Shape| { &m.path_index },
                    |m: &mut Shape| { &mut m.path_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "fill",
                    |m: &Shape| { &m.fill },
                    |m: &mut Shape| { &mut m.fill },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "line_width",
                    |m: &Shape| { &m.line_width },
                    |m: &mut Shape| { &mut m.line_width },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Shape>(
                    "Shape",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Shape {
        static mut instance: ::protobuf::lazy::Lazy<Shape> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Shape::new)
        }
    }
}

impl ::protobuf::Clear for Shape {
    fn clear(&mut self) {
        self.x = 0;
        self.y = 0;
        self.argb = 0;
        self.path_index = 0;
        self.fill = false;
        self.line_width = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Shape {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Shape {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Path {
    // message fields
    pub segments: ::protobuf::RepeatedField<Segment>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Path {
    fn default() -> &'a Path {
        <Path as ::protobuf::Message>::default_instance()
    }
}

impl Path {
    pub fn new() -> Path {
        ::std::default::Default::default()
    }

    // repeated .Segment segments = 1;


    pub fn get_segments(&self) -> &[Segment] {
        &self.segments
    }
    pub fn clear_segments(&mut self) {
        self.segments.clear();
    }

    // Param is passed by value, moved
    pub fn set_segments(&mut self, v: ::protobuf::RepeatedField<Segment>) {
        self.segments = v;
    }

    // Mutable pointer to the field.
    pub fn mut_segments(&mut self) -> &mut ::protobuf::RepeatedField<Segment> {
        &mut self.segments
    }

    // Take field
    pub fn take_segments(&mut self) -> ::protobuf::RepeatedField<Segment> {
        ::std::mem::replace(&mut self.segments, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Path {
    fn is_initialized(&self) -> bool {
        for v in &self.segments {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.segments)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.segments {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.segments {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Path {
        Path::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Segment>>(
                    "segments",
                    |m: &Path| { &m.segments },
                    |m: &mut Path| { &mut m.segments },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Path>(
                    "Path",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Path {
        static mut instance: ::protobuf::lazy::Lazy<Path> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Path::new)
        }
    }
}

impl ::protobuf::Clear for Path {
    fn clear(&mut self) {
        self.segments.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Path {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Path {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Segment {
    // message fields
    pub field_type: SegmentType,
    pub points: ::protobuf::RepeatedField<Point>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Segment {
    fn default() -> &'a Segment {
        <Segment as ::protobuf::Message>::default_instance()
    }
}

impl Segment {
    pub fn new() -> Segment {
        ::std::default::Default::default()
    }

    // .SegmentType type = 1;


    pub fn get_field_type(&self) -> SegmentType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = SegmentType::MOVE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: SegmentType) {
        self.field_type = v;
    }

    // repeated .Point points = 2;


    pub fn get_points(&self) -> &[Point] {
        &self.points
    }
    pub fn clear_points(&mut self) {
        self.points.clear();
    }

    // Param is passed by value, moved
    pub fn set_points(&mut self, v: ::protobuf::RepeatedField<Point>) {
        self.points = v;
    }

    // Mutable pointer to the field.
    pub fn mut_points(&mut self) -> &mut ::protobuf::RepeatedField<Point> {
        &mut self.points
    }

    // Take field
    pub fn take_points(&mut self) -> ::protobuf::RepeatedField<Point> {
        ::std::mem::replace(&mut self.points, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Segment {
    fn is_initialized(&self) -> bool {
        for v in &self.points {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.points)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != SegmentType::MOVE {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        for value in &self.points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != SegmentType::MOVE {
            os.write_enum(1, self.field_type.value())?;
        }
        for v in &self.points {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Segment {
        Segment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SegmentType>>(
                    "type",
                    |m: &Segment| { &m.field_type },
                    |m: &mut Segment| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Point>>(
                    "points",
                    |m: &Segment| { &m.points },
                    |m: &mut Segment| { &mut m.points },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Segment>(
                    "Segment",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Segment {
        static mut instance: ::protobuf::lazy::Lazy<Segment> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Segment::new)
        }
    }
}

impl ::protobuf::Clear for Segment {
    fn clear(&mut self) {
        self.field_type = SegmentType::MOVE;
        self.points.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Segment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Segment {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Point {
    // message fields
    pub x: i32,
    pub y: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Point {
    fn default() -> &'a Point {
        <Point as ::protobuf::Message>::default_instance()
    }
}

impl Point {
    pub fn new() -> Point {
        ::std::default::Default::default()
    }

    // sint32 x = 1;


    pub fn get_x(&self) -> i32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: i32) {
        self.x = v;
    }

    // sint32 y = 2;


    pub fn get_y(&self) -> i32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: i32) {
        self.y = v;
    }
}

impl ::protobuf::Message for Point {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.y = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(1, self.x);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.y);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0 {
            os.write_sint32(1, self.x)?;
        }
        if self.y != 0 {
            os.write_sint32(2, self.y)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Point {
        Point::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                    "x",
                    |m: &Point| { &m.x },
                    |m: &mut Point| { &mut m.x },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                    "y",
                    |m: &Point| { &m.y },
                    |m: &mut Point| { &mut m.y },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Point>(
                    "Point",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Point {
        static mut instance: ::protobuf::lazy::Lazy<Point> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Point::new)
        }
    }
}

impl ::protobuf::Clear for Point {
    fn clear(&mut self) {
        self.x = 0;
        self.y = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Point {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Point {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SegmentType {
    MOVE = 0,
    LINE = 1,
    QUAD = 2,
    CUBIC = 3,
    CLOSE = 4,
}

impl ::protobuf::ProtobufEnum for SegmentType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SegmentType> {
        match value {
            0 => ::std::option::Option::Some(SegmentType::MOVE),
            1 => ::std::option::Option::Some(SegmentType::LINE),
            2 => ::std::option::Option::Some(SegmentType::QUAD),
            3 => ::std::option::Option::Some(SegmentType::CUBIC),
            4 => ::std::option::Option::Some(SegmentType::CLOSE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SegmentType] = &[
            SegmentType::MOVE,
            SegmentType::LINE,
            SegmentType::QUAD,
            SegmentType::CUBIC,
            SegmentType::CLOSE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new_pb_name::<SegmentType>("SegmentType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for SegmentType {
}

impl ::std::default::Default for SegmentType {
    fn default() -> Self {
        SegmentType::MOVE
    }
}

impl ::protobuf::reflect::ProtobufValue for SegmentType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dsubtitle_rendering_data.proto\"\x89\x01\n\rRenderingData\x12\x14\n\
    \x05width\x18\x01\x20\x01(\rR\x05width\x12\x16\n\x06height\x18\x02\x20\
    \x01(\rR\x06height\x12-\n\x0btransitions\x18\x03\x20\x03(\x0b2\x0b.Trans\
    itionR\x0btransitions\x12\x1b\n\x05paths\x18\x04\x20\x03(\x0b2\x05.PathR\
    \x05paths\"`\n\nTransition\x12\x17\n\x07time_in\x18\x01\x20\x01(\x04R\
    \x06timeIn\x12\x19\n\x08time_out\x18\x02\x20\x01(\x04R\x07timeOut\x12\
    \x1e\n\x06shapes\x18\x04\x20\x03(\x0b2\x06.ShapeR\x06shapes\"\x89\x01\n\
    \x05Shape\x12\x0c\n\x01x\x18\x01\x20\x01(\x11R\x01x\x12\x0c\n\x01y\x18\
    \x02\x20\x01(\x11R\x01y\x12\x12\n\x04argb\x18\x03\x20\x01(\rR\x04argb\
    \x12\x1d\n\npath_index\x18\x04\x20\x01(\rR\tpathIndex\x12\x12\n\x04fill\
    \x18\x05\x20\x01(\x08R\x04fill\x12\x1d\n\nline_width\x18\x06\x20\x01(\rR\
    \tlineWidth\",\n\x04Path\x12$\n\x08segments\x18\x01\x20\x03(\x0b2\x08.Se\
    gmentR\x08segments\"K\n\x07Segment\x12\x20\n\x04type\x18\x01\x20\x01(\
    \x0e2\x0c.SegmentTypeR\x04type\x12\x1e\n\x06points\x18\x02\x20\x03(\x0b2\
    \x06.PointR\x06points\"#\n\x05Point\x12\x0c\n\x01x\x18\x01\x20\x01(\x11R\
    \x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\x11R\x01y*A\n\x0bSegmentType\x12\
    \x08\n\x04MOVE\x10\0\x12\x08\n\x04LINE\x10\x01\x12\x08\n\x04QUAD\x10\x02\
    \x12\t\n\x05CUBIC\x10\x03\x12\t\n\x05CLOSE\x10\x04BH\n/se.svt.si.app.sub\
    titleconverter.core.format.srfB\x15SubtitleRenderingDataJ\xd5\x0b\n\x06\
    \x12\x04\0\0/\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\
    \x03\x02\0H\n\t\n\x02\x08\x01\x12\x03\x02\0H\n\x08\n\x01\x08\x12\x03\x03\
    \06\n\t\n\x02\x08\x08\x12\x03\x03\06\n\n\n\x02\x04\0\x12\x04\x05\0\n\x01\
    \n\n\n\x03\x04\0\x01\x12\x03\x05\x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x06\x04\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x06\x04\n\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x06\x0b\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x06\x13\x14\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x07\x04\x16\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03\x07\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x07\x0b\x11\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x07\x14\x15\n\x0b\
    \n\x04\x04\0\x02\x02\x12\x03\x08\x04(\n\x0c\n\x05\x04\0\x02\x02\x04\x12\
    \x03\x08\x04\x0c\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x08\r\x17\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x08\x18#\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x08&'\n\x0b\n\x04\x04\0\x02\x03\x12\x03\t\x04\x1c\n\x0c\n\x05\
    \x04\0\x02\x03\x04\x12\x03\t\x04\x0c\n\x0c\n\x05\x04\0\x02\x03\x06\x12\
    \x03\t\r\x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\t\x12\x17\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03\t\x1a\x1b\n\n\n\x02\x04\x01\x12\x04\x0c\0\x10\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\x0c\x08\x12\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\r\x04\x17\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\r\x04\n\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\r\x0b\x12\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\r\x15\x16\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0e\x04\x18\n\x0c\
    \n\x05\x04\x01\x02\x01\x05\x12\x03\x0e\x04\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03\x0e\x0b\x13\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0e\x16\
    \x17\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0f\x04\x1e\n\x0c\n\x05\x04\x01\
    \x02\x02\x04\x12\x03\x0f\x04\x0c\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\
    \x0f\r\x12\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x0f\x13\x19\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x03\x0f\x1c\x1d\n\n\n\x02\x04\x02\x12\x04\
    \x12\0\x19\x01\n\n\n\x03\x04\x02\x01\x12\x03\x12\x08\r\n\x0b\n\x04\x04\
    \x02\x02\0\x12\x03\x13\x04\x11\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x13\
    \x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x13\x0b\x0c\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03\x13\x0f\x10\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\
    \x14\x04\x11\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x14\x04\n\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03\x14\x0b\x0c\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03\x14\x0f\x10\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x15\x04\x14\
    \n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x15\x04\n\n\x0c\n\x05\x04\x02\
    \x02\x02\x01\x12\x03\x15\x0b\x0f\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\
    \x15\x12\x13\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x16\x04\x1a\n\x0c\n\x05\
    \x04\x02\x02\x03\x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\x02\x02\x03\x01\
    \x12\x03\x16\x0b\x15\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x16\x18\x19\
    \n\x0b\n\x04\x04\x02\x02\x04\x12\x03\x17\x04\x12\n\x0c\n\x05\x04\x02\x02\
    \x04\x05\x12\x03\x17\x04\x08\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\x17\
    \t\r\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\x17\x10\x11\n\x0b\n\x04\x04\
    \x02\x02\x05\x12\x03\x18\x04\x1a\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03\
    \x18\x04\n\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03\x18\x0b\x15\n\x0c\n\
    \x05\x04\x02\x02\x05\x03\x12\x03\x18\x18\x19\n\n\n\x02\x04\x03\x12\x04\
    \x1b\0\x1d\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1b\x08\x0c\n\x0b\n\x04\x04\
    \x03\x02\0\x12\x03\x1c\x04\"\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x1c\
    \x04\x0c\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x1c\r\x14\n\x0c\n\x05\x04\
    \x03\x02\0\x01\x12\x03\x1c\x15\x1d\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\
    \x1c\x20!\n\n\n\x02\x04\x04\x12\x04\x1f\0\"\x01\n\n\n\x03\x04\x04\x01\
    \x12\x03\x1f\x08\x0f\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x20\x04\x19\n\x0c\
    \n\x05\x04\x04\x02\0\x06\x12\x03\x20\x04\x0f\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x03\x20\x10\x14\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x20\x17\
    \x18\n\x0b\n\x04\x04\x04\x02\x01\x12\x03!\x04\x1e\n\x0c\n\x05\x04\x04\
    \x02\x01\x04\x12\x03!\x04\x0c\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03!\r\
    \x12\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03!\x13\x19\n\x0c\n\x05\x04\
    \x04\x02\x01\x03\x12\x03!\x1c\x1d\n\n\n\x02\x05\0\x12\x04$\0*\x01\n\n\n\
    \x03\x05\0\x01\x12\x03$\x05\x10\n\x0b\n\x04\x05\0\x02\0\x12\x03%\x04\r\n\
    \x0c\n\x05\x05\0\x02\0\x01\x12\x03%\x04\x08\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03%\x0b\x0c\n\x0b\n\x04\x05\0\x02\x01\x12\x03&\x04\r\n\x0c\n\x05\
    \x05\0\x02\x01\x01\x12\x03&\x04\x08\n\x0c\n\x05\x05\0\x02\x01\x02\x12\
    \x03&\x0b\x0c\n\x0b\n\x04\x05\0\x02\x02\x12\x03'\x04\r\n\x0c\n\x05\x05\0\
    \x02\x02\x01\x12\x03'\x04\x08\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03'\x0b\
    \x0c\n\x0b\n\x04\x05\0\x02\x03\x12\x03(\x04\x0e\n\x0c\n\x05\x05\0\x02\
    \x03\x01\x12\x03(\x04\t\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03(\x0c\r\n\
    \x0b\n\x04\x05\0\x02\x04\x12\x03)\x04\x0e\n\x0c\n\x05\x05\0\x02\x04\x01\
    \x12\x03)\x04\t\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03)\x0c\r\n\n\n\x02\
    \x04\x05\x12\x04,\0/\x01\n\n\n\x03\x04\x05\x01\x12\x03,\x08\r\n\x0b\n\
    \x04\x04\x05\x02\0\x12\x03-\x04\x11\n\x0c\n\x05\x04\x05\x02\0\x05\x12\
    \x03-\x04\n\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03-\x0b\x0c\n\x0c\n\x05\
    \x04\x05\x02\0\x03\x12\x03-\x0f\x10\n\x0b\n\x04\x04\x05\x02\x01\x12\x03.\
    \x04\x11\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03.\x04\n\n\x0c\n\x05\x04\
    \x05\x02\x01\x01\x12\x03.\x0b\x0c\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\
    \x03.\x0f\x10b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
